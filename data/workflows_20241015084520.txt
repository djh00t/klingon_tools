# Tree structure of .github/workflows/
.github/workflows/
├── README.md
├── auto-pr.yaml
├── full-release.yaml
├── pr_body_gen.py
├── pr_body_template.j2
├── release.yaml
├── semantic-release.sh
└── semantic_release.md

1 directory, 8 files

# README.md
# GitHub Workflows

This directory contains the GitHub Actions workflows for this repository. Below is a brief description of each workflow:

## Workflows Overview

This directory contains the GitHub Actions workflows for this repository. Below is a brief description of each workflow and the path that each change takes from the development branch through to being pushed to PyPI.

### auto-pr.yaml
This workflow automatically creates a pull request when changes are pushed to any branch except `main` and `master`. It ensures that changes are reviewed before being merged into the main branch.

### run-tests.yaml
This workflow runs the test suite to ensure that the codebase is functioning correctly. It is triggered on pull requests and pushes to the main branch. It includes steps to check out the code, set up Python, cache pip dependencies, and run tests.

### deploy.yaml
This workflow handles the deployment process. It is triggered when changes are pushed to the main branch. It includes steps to check out the code, set up Python, install dependencies, increment the version, create and merge a version update PR, build and test the package, and deploy to TestPyPI and PyPI.

### release-drafter.yaml
This workflow drafts a new release based on the merged pull requests. It is triggered when changes are pushed to the main branch. It uses the `release-drafter` action to generate release notes.

## Path from Development to PyPI

1. **Development Branch**: Developers push changes to feature branches.
2. **Auto PR**: The `auto-pr.yaml` workflow creates a pull request for the new branch.
3. **Run Tests**: The `run-tests.yaml` workflow runs tests on the pull request to ensure code quality.
4. **Merge to Main**: Once the pull request is approved and merged into the `main` branch, the `deploy.yaml` workflow is triggered.
5. **Deploy**: The `deploy.yaml` workflow increments the version, creates a version update PR, builds and tests the package, and deploys it to TestPyPI and PyPI.
6. **Release Drafter**: The `release-drafter.yaml` workflow generates release notes for the new version.

This process ensures that all changes are tested, reviewed, and documented before being deployed to PyPI.

# auto-pr.yaml
name: 🤖 Auto PR

on:
  # Push to all but main, master
  push:
    branches-ignore:
      - main
      - master
      - release
  workflow_dispatch:

jobs:
  create-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0 # Fetch all branches

      - name: Setup Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: "3.x"

      - name: Load Python cache
        uses: actions/cache@v4.0.2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-cache-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-cache-${{ hashFiles('**/requirements.txt') }}
            ${{ runner.os }}-pip-cache-

      - name: Set up environment variables
        run: |
          # Setup GITHUB_TOKEN
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          # Setup GH_TOKEN
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          # Setup OpenAI API Key
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          # Get Current PR Title
          PR_TITLE=$(gh pr list --json title --jq '.[0].title' || echo "")
          # Sanitize PR_TITLE to remove problematic characters
          SANITIZED_PR_TITLE=$(echo "$PR_TITLE" | tr -d '\n' | tr -d '\r' | tr -d '"')
          echo "PR_TITLE=$SANITIZED_PR_TITLE" >> $GITHUB_ENV
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_TITLE: ${{ env.PR_TITLE }}

      - name: Configure Git & Login to GitHub CLI
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Install Poetry
        uses: snok/install-poetry@v1.4.1

      - name: Install Python Requirements
        run: poetry install --with dev --no-root && pip install -U .

      - name: Run Unit Tests
        run: make test

      # Check if PR exists, if it doesn't create one with a generated title using
      # pr-title-generate
      - name: Create or Update PR
        id: pr
        run: |
          SOURCE_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          PR_URL=$(gh pr list --head $SOURCE_BRANCH --json url --jq '.[0].url' || echo "")
          PR_TITLE=$(pr-title-generate)
          echo "PR_TITLE: $PR_TITLE"
          if [ "$SOURCE_BRANCH" = "release" ]; then
            BASE_BRANCH="main"
          else
            BASE_BRANCH="release"
          fi
          if [ -z "$PR_URL" ]; then
            PR_URL=$(gh pr create --title "$PR_TITLE" --body "This PR was automatically generated by a GitHub Action" --base $BASE_BRANCH)
            echo "PR_URL: $PR_URL"
          fi
          PR_BODY=$(python3 .github/workflows/pr_body_gen.py $SOURCE_BRANCH $BASE_BRANCH)
          gh pr edit $PR_URL --title "$PR_TITLE" --body "$PR_BODY"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_TITLE: ${{ env.PR_TITLE }}
        shell: /usr/bin/bash -e {0}

# full-release.yaml
name: 🚀 Full Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        run: |
          poetry install

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Configure Git & Login to GitHub CLI
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_USER_AGENT: ${{ secrets.PYPI_USER_AGENT }}
        run: |
          poetry run semantic-release version
          poetry run semantic-release publish

      - name: Build and publish
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_USER_AGENT }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry build
          poetry publish

      - name: Update GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          gh release edit $LATEST_TAG --prerelease=false

# pr_body_gen.py
#!/usr/bin/env python3
"""
This script generates a pull request body using commit messages and templates.

It fetches commit messages from the current branch, categorizes them, and
renders a pull request body using a Jinja2 template.

Typical usage example:
    $ python .github/workflows/pr_body_gen.py
"""

import os
import re
import subprocess
import sys

from jinja2 import Template

# Path to the Jinja2 template for the pull request body
template_path = ".github/workflows/pr_body_template.j2"
# Load the Jinja2 template
with open(template_path, "r") as file_:
    template = Template(file_.read())

# Dictionary to categorize commit messages by type
types = {
    "build": [],
    "chore": [],
    "ci": [],
    "docs": [],
    "feat": [],
    "fix": [],
    "other": [],
    "perf": [],
    "refactor": [],
    "revert": [],
    "style": [],
    "test": [],
}

# Regular expression pattern to match emojis
emoji_pattern = re.compile(
    "["
    "\U0001F300-\U0001F5FF"  # symbols & pictographs
    "\U0001F600-\U0001F64F"  # emoticons
    "\U0001F680-\U0001F6FF"  # transport & map symbols
    "\U0001F700-\U0001F77F"  # alchemical symbols
    "\U0001F780-\U0001F7FF"  # Geometric Shapes Extended
    "\U0001F800-\U0001F8FF"  # Supplemental Arrows-C
    "\U0001F900-\U0001F9FF"  # Supplemental Symbols and Pictographs
    "\U0001FA00-\U0001FA6F"  # Chess Symbols
    "\U0001FA70-\U0001FAFF"  # Symbols and Pictographs Extended-A
    "\u2702-\u27B0"  # Dingbats
    "\u24C2-\U0001F251"
    "]+",
    flags=re.UNICODE,
)


def remove_emojis_and_leading_spaces(text: str) -> str:
    """
    Removes emojis and leading spaces from the given text.

    Args:
        text (str): The input text containing emojis and leading spaces.

    Returns:
        str: The text with emojis and leading spaces removed.
    """
    text = emoji_pattern.sub("", text).strip()
    if len(text) > 1 and text[1] == " ":
        text = text[2:]
    return text


def get_branch_name() -> str:
    """
    Get the name of the current branch.

    Returns:
        str: The name of the current branch.
    """
    result = subprocess.run(
        ["git", "rev-parse", "--abbrev-ref", "HEAD"],
        capture_output=True,
        text=True,
        check=True,
    )
    return result.stdout.strip()


# Get the source and destination branches from the command-line arguments
source_branch = sys.argv[1] if len(sys.argv) > 1 else get_branch_name()
dest_branch = sys.argv[2] if len(sys.argv) > 2 else "main"

# Fetch the latest changes from the dest_branch
os.system(f"git fetch origin {dest_branch}")

# Get commit messages from the current branch that are not in the dest_branch
commit_messages = (
    os.popen(f'git log origin/{dest_branch}..HEAD --pretty=format:"%s"')
    .read()
    .split("\n")
)

# Process each commit message to categorize it
for message in commit_messages:
    # Remove emojis and leading spaces from the message
    message = remove_emojis_and_leading_spaces(message)
    matched = False
    for change_type, _ in types.items():
        if re.match(
            rf"^[\U0001F300-\U0001F5FF\u2000-\u3300]*{change_type}"
            rf"\(\S+\):",
            message,
            re.UNICODE,
        ) or re.match(
            rf"^[\U0001F300-\U0001F5FF\u2000-\u3300]*{change_type}:",
            message,
            re.UNICODE,
        ):
            types[change_type].append(message)
            matched = True
            break
    if not matched:
        # Remove the first and second character if the second char is a space
        # and try matching again
        if len(message) > 1 and message[1] == " ":
            message = message[2:]
            for change_type, _ in types.items():
                if re.match(
                    rf"^[\U0001F300-\U0001F5FF\u2000-\u3300]*{change_type}"
                    rf"\(\S+\):",
                    message,
                    re.UNICODE,
                ) or re.match(
                    rf"^[\U0001F300-\U0001F5FF\u2000-\u3300]*{change_type}:",
                    message,
                    re.UNICODE,
                ):
                    types[change_type].append(message)
                    matched = True
                    break
    if not matched:
        types["other"].append(message)


def generate_summary() -> str:
    """
    Generate the summary by running the 'pr-summary-generate' command.

    Returns:
        str: The summary generated by the command.
    """
    result = subprocess.run(
        ["pr-summary-generate"], capture_output=True, text=True, check=True
    )
    return result.stdout.strip()


def generate_motivation_context() -> str:
    """
    Generates the motivation context by running the 'pr-context-generate'
    command.

    Returns:
        str: The motivation context generated by the command.
    """
    try:
        result = subprocess.run(
            ["pr-context-generate"],
            capture_output=True,
            text=True,
            check=True,
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Failed to generate PR context: {e}")
        return ""


def get_pr_number() -> str:
    """
    Get the pull request number.

    Returns:
        str: The pull request number.
    """
    result = subprocess.run(
        ["gh", "pr", "view", "--json", "number", "--jq", ".number"],
        capture_output=True,
        text=True,
        check=True,
    )
    return result.stdout.strip()


# Generate the summary and motivation context
try:
    summary = generate_summary()
except subprocess.CalledProcessError as e:
    print(f"Error generating summary: {e}")
    summary = "Summary generation failed."
motivation_context = generate_motivation_context()
pr_number = get_pr_number()

# Render the pull request body using the template and the collected data
pr_body = template.render(
    summary=summary,
    branch_name=source_branch,
    dest_branch=dest_branch,
    actor=os.getenv("GITHUB_ACTOR"),
    pr_number=pr_number,
    motivation_context=motivation_context,
    types=types,
)

# Print the generated pull request body
print(pr_body)

# pr_body_template.j2
# Pull Request {{ pr_number }}
This PR is automatically created for the new branch {{ branch_name }} created by @{{ actor }}

## Summary
{{ summary }}

## Motivation and Context
{{ motivation_context }}

{% if issue_links %}
## Issue Links
{% for link in issue_links %}
- {{ link }}
{%- endfor %}
{%- endif %}
## Types of Changes
{%- if types.build %}
- [ ] 🛠️ `build`: ***Changes that affect the build system or external dependencies***
    {%- for change in types.build %}
    - {{ change }}
    {%- endfor %}
{%- endif %}
{%- if types.chore %}
- [ ] 🔧 `chore`: ***Other changes that don't modify src or test files***
    {%- for change in types.chore %}
    - {{ change }}
    {%- endfor %}
{%- endif %}
{%- if types.ci %}
- [ ] ⚙️ `ci`: ***Changes to CI configuration files and scripts***
    {%- for change in types.ci %}
    - {{ change }}
    {%- endfor %}
{%- endif %}
{%- if types.docs %}
- [ ] 📚 `docs`: ***Documentation changes***
    {%- for change in types.docs %}
    - {{ change }}
    {%- endfor %}
{%- endif %}
{%- if types.feat %}
- [ ] ✨ `feat`: ***New features***
    {%- for change in types.feat %}
    - {{ change }}
    {%- endfor %}
{%- endif %}
{%- if types.fix %}
- [ ] 🐛 `fix`: ***Bug fixes***
    {%- for change in types.fix %}
    - {{ change }}
    {%- endfor %}
{%- endif %}
{%- if types.perf %}
- [ ] 🚀 `perf`: ***Code changes that improve performance***
    {%- for change in types.perf %}
    - {{ change }}
    {%- endfor %}
{%- endif %}
{%- if types.refactor %}
- [ ] ♻️ `refactor`: ***Code changes that neither fix bugs nor add features***
    {%- for change in types.refactor %}
    - {{ change }}
    {%- endfor %}
{%- endif %}
{%- if types.revert %}
- [ ] ⏪ `revert`: ***Reverts a previous commit***
    {%- for change in types.revert %}
    - {{ change }}
    {%- endfor %}
{%- endif %}
{%- if types.style %}
- [ ] 💄 `style`: ***Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)***
    {%- for change in types.style %}
    - {{ change }}
    {%- endfor %}
{%- endif %}
{%- if types.test %}
- [ ] 🚨 `test`: ***Adding missing or correcting existing tests***
    {%- for change in types.test %}
    - {{ change }}
    {%- endfor %}
{%- endif %}
{%- if types.other %}
- [ ] ⚠️ `other`: ***Changes that don't fit into the above categories***
    {%- for change in types.other %}
    - {{ change }}
    {%- endfor %}
{%- endif %}

# release.yaml
name: 🥳 Release

on:
  push:
    branches:
      - release
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.4.1"

      - name: Load Node.js cache
        uses: actions/cache@v4.0.2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-cache
          restore-keys: |
            ${{ runner.os }}-node-cache-

      - name: Install Node.js dependencies
        run: |
          npm install

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Load Python cache
        uses: actions/cache@v4.0.2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-cache-${{ hashFiles('**/requirements.in') }}
          restore-keys: |
                ${{ runner.os }}-pip-cache-${{ hashFiles('**/requirements.in') }}
                ${{ runner.os }}-pip-cache-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install Python dependencies
        run: |
          poetry install

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Configure Git & Login to GitHub CLI
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_USER_AGENT: ${{ secrets.PYPI_USER_AGENT }}
        run: ./.github/workflows/semantic-release.sh

  create-release-pr:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0 # Fetch all branches

      - name: Setup Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: "3.x"

      - name: Load Python cache
        uses: actions/cache@v4.0.2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-cache
          restore-keys: |
            ${{ runner.os }}-pip-cache

      - name: Set up environment variables
        run: |
          # Setup GITHUB_TOKEN
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          # Setup GH_TOKEN
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          # Setup OpenAI API Key
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          # Get Current PR Title
          PR_TITLE=$(gh pr list --json title --jq '.[0].title' || echo "")
          # Sanitize PR_TITLE to remove problematic characters
          SANITIZED_PR_TITLE=$(echo "$PR_TITLE" | tr -d '\n' | tr -d '\r' | tr -d '"')
          echo "PR_TITLE=$SANITIZED_PR_TITLE" >> $GITHUB_ENV
          echo "PR TITLE: $PR_TITLE"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Configure Git & Login to GitHub CLI
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Compile Python requirements
        run: make install

      - name: Run Unit Tests
        run: make test

      # Check if PR exists, if it doesn't create one with a generated title using
      # pr-title-generate
      - name: Create or Update PR
        id: pr
        run: |
          SOURCE_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          PR_URL=$(gh pr list --head $SOURCE_BRANCH --json url --jq '.[0].url' || echo "")
          PR_TITLE=$(pr-title-generate)
          echo "PR_TITLE: $PR_TITLE"
          BASE_BRANCH="main"
          if [ -z "$PR_URL" ]; then
            PR_URL=$(gh pr create --title "Release $SOURCE_BRANCH" --body "This PR was automatically generated by a GitHub Action" --base $BASE_BRANCH --head $SOURCE_BRANCH)
            echo "PR_URL: $PR_URL"
          fi
          PR_BODY=$(python3 .github/workflows/pr_body_gen.py $SOURCE_BRANCH $BASE_BRANCH)
          gh pr edit $PR_URL --title "$PR_TITLE" --body "$PR_BODY"
        shell: /usr/bin/bash -e {0}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_TITLE: ${{ env.PR_TITLE }}

# semantic-release.sh
#!/bin/bash

# Extract the new version from package.json
NEW_VERSION=$(grep '"version":' package.json | sed 's/.*"version": "\(.*\)",/\1/')
echo "New version extracted: $NEW_VERSION"

# Update the version in pyproject.toml
poetry version $NEW_VERSION

# Update the version in package.json
jq --arg new_version "$NEW_VERSION" '.version = $new_version' package.json > tmp.$$.json && mv tmp.$$.json package.json

# Update the version in klingon_tools/__init__.py
sed -i '' "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" klingon_tools/__init__.py
echo "Running semantic-release..."
npx semantic-release

# If semantic-release was successful, commit the changes to a new branch
if [ $? -eq 0 ]; then
    git checkout -b release-v$NEW_VERSION
    git add pyproject.toml
    git commit -m "chore: update version to $NEW_VERSION [skip ci]"
    git push origin release-v$NEW_VERSION
else
    echo "semantic-release failed"
fi

# semantic_release.md

# Managing Releases with Semantic Release and GitHub Actions

This document explains how we manage releases for our Python library using `semantic-release`. It covers the installation, configuration, and workflow setup to ensure automatic versioning, changelog generation, and publishing to PyPI.

## Overview

`semantic-release` automates the versioning and release process based on commit messages following the Conventional Commits standard. It helps in maintaining a consistent and predictable release process.

## Installation

### Install Dependencies

First, install the required dependencies by running the following commands:

```bash
npm install -D semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/release-notes-generator @semantic-release/exec
```

## Configuration

### `.releaserc` File

Create a `.releaserc` file in the root of your repository with the following content:

```json
{
  "branches": ["main", "release"],
  "plugins": [
    "@semantic-release/commit-analyzer",
    "@semantic-release/release-notes-generator",
    "@semantic-release/changelog",
    "@semantic-release/github"
  ]
}
```

### Setup Python Version Management

Ensure your `setup.py` dynamically reads the version from a `version.py` file.

1. **`version.py`**: Create a file named `version.py` in the root of your repository with the following content:

    ```python
    __version__ = "0.1.0"
    ```

2. **`setup.py`**: Modify your `setup.py` to read the version from `version.py`:

    ```python
    import os
    import re
    from setuptools import setup, find_packages

    def get_version():
        version_file = os.path.join(os.path.dirname(__file__), 'version.py')
        with open(version_file) as f:
            code = f.read()
            version_match = re.search(r"^__version__ = ['"]([^'"]*)['"]", code, re.M)
            if version_match:
                return version_match.group(1)
            raise RuntimeError("Unable to find version string.")

    setup(
        name='your_package_name',
        version=get_version(),
        packages=find_packages(),
        # other setup arguments...
    )
    ```

## GitHub Actions Workflow

Create a GitHub Actions workflow to automate the release process. Add the following YAML configuration to `.github/workflows/release.yml`:

```yaml
name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Node.js dependencies
        run: npm install

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

```

### GitHub Secrets

Ensure you have the following secrets set up in your GitHub repository:

- `PYPI_USER_AGENT`: Your PyPI API key

## Conventional Commits

Our commit messages follow the Conventional Commits standard. Here’s a brief guide:

- `feat: description` for new features
- `fix: description` for bug fixes
- `docs: description` for documentation changes
- `style: description` for formatting changes
- `refactor: description` for code refactoring
- `test: description` for adding or modifying tests
- `chore: description` for maintenance tasks

## Release Process

When a commit is pushed to the `main` branch, the GitHub Actions workflow will:

1. Checkout the code.
2. Set up the Node.js and Python environments.
3. Install the necessary dependencies.
4. Run `semantic-release` to:
   - Analyze commits to determine the next version.
   - Generate release notes and update the changelog.
   - Commit the updated changelog and version files.
   - Create a GitHub release.
   - Build the Python package.
   - Publish the package to PyPI using `twine`.

### Example Release

A typical GitHub release will include:

- **Title**: `vX.X.X` (new version number)
- **Release Notes**:
    ```
    ## [v1.2.0] - 2024-06-26

    ### Features

    - **api:** add user authentication endpoint ([#12](https://github.com/your-repo/issues/12)) ([abcdef1](https://github.com/your-repo/commit/abcdef1))
    - **core:** implement new caching strategy ([#15](https://github.com/your-repo/issues/15)) ([1234567](https://github.com/your-repo/commit/1234567))

    ### Bug Fixes

    - **db:** fix connection leak issue ([#20](https://github.com/your-repo/issues/20)) ([89abcd1](https://github.com/your-repo/commit/89abcd1))
    - **ui:** correct alignment of buttons ([#22](https://github.com/your-repo/issues/22)) ([6543210](https://github.com/your-repo/commit/6543210))

    ### Documentation

    - **readme:** update installation instructions ([#30](https://github.com/your-repo/issues/30)) ([0fedcba](https://github.com/your-repo/commit/0fedcba))

    ### Changelog

    See the full changelog [here](https://github.com/your-repo/CHANGELOG.md).

    ---
    This release was generated automatically by [semantic-release](https://github.com/semantic-release/semantic-release).
    ```

## Summary

By following the steps outlined in this document, we ensure a consistent and automated release process for our Python library, leveraging the power of `semantic-release` to handle versioning, changelog generation, and publishing to PyPI. This setup not only saves time but also reduces human error, ensuring our releases are predictable and reliable.

# .releaserc.js
module.exports = {
  branches: [
    { name: "main" },
    { name: "release", prerelease: true }
  ],
  repositoryUrl: "https://github.com/djh00t/klingon_tools.git",
  plugins: [
    "@semantic-release/commit-analyzer",
    "@semantic-release/release-notes-generator",
    "@semantic-release/changelog",
    "@semantic-release/github",
    ["@semantic-release/git", {
      "assets": ["README.md", "pyproject.toml", "CHANGELOG.md"],
      "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
    }],
  ],
  preset: "conventionalcommits",
  releaseRules: [
    { type: "build", release: "patch" },
    { type: "chore", release: "patch" },
    { type: "ci", release: "patch" },
    { type: "docs", release: "patch" },
    { type: "feat", release: "minor" },
    { type: "fix", release: "patch" },
    { type: "perf", release: "patch" },
    { type: "refactor", release: "patch" },
    { type: "revert", release: "patch" },
    { type: "style", release: "patch" },
    { type: "test", release: "patch" },
    { type: "other", release: "patch" },
  ],
  parserOpts: {
    headerPattern: /^(?:[\u{1F300}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]\s)?(\w*)(?:\((.*)\))?!?:\s(.*)$/u,
    headerCorrespondence: ['type', 'scope', 'subject'],
    noteKeywords: ["BREAKING CHANGE", "BREAKING CHANGES"],
  },
  writerOpts: {
    commitsSort: ["subject", "scope"],
  },
};

# package.json
{
  "name": "klingon-tools",
  "version": "2.1.5",
  "description": "Klingon tools for various utilities",
  "scripts": {
    "semantic-release": "semantic-release"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:djh00t/klingon_tools.git"
  },
  "author": "David Hooton <klingon_tools+david@hooton.org>",
  "license": "MIT",
  "devDependencies": {
    "@semantic-release/changelog": "^5.0.1",
    "@semantic-release/exec": "^3.3.8",
    "@semantic-release/git": "^10.0.0",
    "@semantic-release/github": "^5.5.8",
    "conventional-changelog-conventionalcommits": "^7.0.2",
    "glob": "^10.4.5",
    "rimraf": "^6.0.0",
    "semantic-release": "^23.1.1"
  },
  "dependencies": {
    "conventional-changelog-conventionalcommits": "^7.0.2"
  }
}

# pyproject.toml
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "klingon_tools"
version = "2.1.5-rc.2"
description = "A set of utilities for running and logging shell commands in a user-friendly manner."
authors = ["David Hooton <klingon_tools+david@hooton.org>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/djh00t/klingon_tools"
packages = [{ include = "klingon_tools" }]
include = ["README.md", "docs/*.md"]

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
openai = "^1.42.0"
gitpython = "^3.1.43"
requests = "^2.32.3"
httpx = "^0.27.0"
pyyaml = "^6.0.2"
ruamel-yaml = "^0.18.6"
pre-commit = "^3.8.0"
psutil = "^6.0.0"
tabulate = "^0.9.0"
packaging = "^24.1"
jinja2 = "^3.1.4"
litellm = "^1.44.4"
iniconfig = "^2.0.0"
toml = "^0.10.2"
emoji = "^2.14.0"
pytest-timeout = "^2.3.1"

[tool.poetry.group.dev.dependencies]
pytest-mock = "^3.14.0"
poetry = "^1.8.3"
pytest = "^8.3.2"
pytest-dependency = "^0.6.0"
autopep8 = "^2.3.1"
docformatter = "^1.7.5"

[tool.poetry.scripts]
push = "klingon_tools.push:main"
gh-actions-update = "klingon_tools.gh_actions_update:main"
pr-title-generate = "klingon_tools.entrypoints:gh_pr_gen_title"
pr-summary-generate = "klingon_tools.entrypoints:gh_pr_gen_summary"
pr-context-generate = "klingon_tools.entrypoints:gh_pr_gen_context"
kstart = "klingon_tools.kstart:main"
log-message = "klingon_tools.entrypoints:log_message_entrypoint"
ktest = "klingon_tools.ktest:ktest_entrypoint"

###
### Moved to .pre-commit-config.yaml due to reliability issues
###
# [tool.black]
# line-length = 79
# target-version = ["py36", "py37", "py38", "py39", "py310", "py311", "py312"]
# include = "\\.pyi?$"
# exclude = "\\.eggs|\\.git|\\.hg|\\.mypy_cache|\\.tox|\\.venv|_build|buck-out|build|dist|tests/*.py"

[tool.flake8]
max-line-length = 80
verbose = 3

[tool.pylint."MESSAGES CONTROL"]
disable = ["import-error"]

[tool.pylint.format]
max-line-length = 80

[tool.yapf]
based_on_style = "google"
column_limit = 80
dedent_closing_brackets = true
coalesce_brackets = true
spaces_before_comment = 4
split_before_logical_operator = true

[tool.yapfignore]
ignore_patterns = ["temp/**/*.py", "temp2/*.py"]

[tool.mypy]
exclude = "tmp/"

[tool.pytest.ini_options]
addopts = "-ra -q"
testpaths = ["tests"]
minversion = "8.3.1"
filterwarnings = ["error", "ignore::DeprecationWarning", 'ignore:open_text is deprecated. Use files() instead.:DeprecationWarning:litellm.utils',]
markers = ["optional: mark test as optional","dependency: mark test as having dependencies", "ollama_installed: marks tests that require Ollama to be installed", "ollama_server_running: marks tests that require the Ollama server to be running", "depends: marks tests with dependencies on other tests"]

[tool.semantic_release]
version_variable = ["pyproject.toml:version"]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_pattern = ["README.md:version-{version}"]
major_on_zero = false
branch = "main"
upload_to_pypi = true
upload_to_release = true
build_command = "pip install poetry && poetry build"
