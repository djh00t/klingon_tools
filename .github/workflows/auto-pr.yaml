name: Auto PR

on:
  # Push to all but main and master
  push:
    branches-ignore:
      - main
      - master

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0  # Fetch all branches
      - name: Cache APT packages
        uses: actions/cache@v4.0.2
        with:
          key: ${{ runner.os }}-apt
          path: /var/cache/apt
          restore-keys: ${{ runner.os }}-apt-
      - name: Cache pip packages
        uses: actions/cache@v4.0.2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
          pip install -r requirements.txt
          make install
      - name: Authenticate with GitHub CLI
        env:
          GH_TOKEN: ""
        run: |
          unset GH_TOKEN
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status
      - name: Set up environment variables
        run: |
          # Setup OpenAI API Key
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          # Get Current PR Title
          PR_TITLE=$(gh pr list --json title --jq '.[0].title' || echo "")
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "PR TITLE: $PR_TITLE"
          # Get Current PR Body
          PR_BODY=$(gh pr list --json body --jq '.[0].body' || echo "")
          echo "PR_BODY=$(echo "$PR_BODY" | sed ':a;N;$!ba;s/\n/\\n/g')" >> $GITHUB_ENV
          echo "PR BODY: $PR_BODY"
          # Get Current PR URL
          PR_URL=$(gh pr list --json url --jq '.[0].url' || echo "")
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV
          echo "PR URL: $PR_URL"
          # Get Current PR Body Description (Text between "## Description" and
          # "## Motivation and Context" lines)
          PR_BODY_DESCRIPTION=$(echo "$PR_BODY" | sed -n '/## Description/,/## Motivation and Context/p' | sed '1d;$d')
          if [ -z "$PR_BODY_DESCRIPTION" ]; then
            PR_BODY_DESCRIPTION=$(pr-summary-generate)
          fi
          echo "PR_BODY_DESCRIPTION=$(echo "$PR_BODY_DESCRIPTION" | sed ':a;N;$!ba;s/\n/\\n/g')" >> $GITHUB_ENV
          echo "PR BODY DESCRIPTION: $PR_BODY_DESCRIPTION"
          # Generate PR Body Motivation and Context
          PR_BODY_MOTIVATION_AND_CONTEXT=$(pr-context-generate)
          echo "PR_BODY_MOTIVATION_AND_CONTEXT=$(echo "$PR_BODY_MOTIVATION_AND_CONTEXT" | sed ':a;N;$!ba;s/\n/\\n/g')" >> $GITHUB_ENV
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Generate PR Body from Template
        shell: /usr/bin/bash -e {0}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_TITLE: ${{ env.PR_TITLE }}
          PR_BODY: ${{ env.PR_BODY }}
          PR_URL: ${{ env.PR_URL }}
          PR_BODY_DESCRIPTION: ${{ env.PR_BODY_DESCRIPTION }}
          PR_BODY_MOTIVATION_AND_CONTEXT: ${{ env.PR_BODY_MOTIVATION_AND_CONTEXT }}
        run: |
          python3 -c "
          import os
          from jinja2 import Template
          import re

          template_path = '.github/workflows/pr_body_template.j2'
          with open(template_path) as file_:
              template = Template(file_.read())

          commit_messages = os.popen('git log --pretty=format:\"%s\"').read().split('\n')
          changes = {
              'feat': [],
              'fix': [],
              'docs': [],
              'style': [],
              'refactor': [],
              'perf': [],
              'test': [],
              'build': [],
              'ci': [],
              'chore': [],
              'revert': [],
              'other': []
          }
          emoji_mapping = {
              'feat': ':sparkles:',
              'fix': ':bug:',
              'docs': ':books:',
              'style': ':lipstick:',
              'refactor': ':recycle:',
              'perf': ':rocket:',
              'test': ':rotating_light:',
              'build': ':hammer_and_wrench:',
              'ci': ':gear:',
              'chore': ':wrench:',
              'revert': ':rewind:'
          }

          for message in commit_messages:
              matched = False
              for change_type, emoji in emoji_mapping.items():
                  if re.match(f'^{emoji} {change_type}|^{change_type}', message):
                      changes[change_type].append(message)
                      matched = True
                      break
              if not matched:
                  changes['other'].append(message)

          pr_body = template.render(
              branch_name=os.getenv('GITHUB_REF'),
              actor=os.getenv('GITHUB_ACTOR'),
              description=os.getenv('PR_BODY_DESCRIPTION'),
              motivation_context=os.getenv('PR_BODY_MOTIVATION_AND_CONTEXT'),
              changes=changes
          )
          print(pr_body)
          " > pr_body.txt



#       - name: Generate PR Title from Template with OpenAI
#         run: |
#           pip install -e .
#           PR_URL=$(gh pr list --json url --jq '.[0].url' || echo "")
#           if [ -z "$PR_TITLE" ]; then
#             PR_TITLE=$(pr-title-generate)
#           fi
#           if [ -z "$PR_URL" ]; then
#             # No PR exists, create one
#             gh pr create --base main --head ${{ github.ref }} --title "$PR_TITLE" --body "$(cat pr_body.txt)"
#           else
#             # PR exists, update it
#             gh pr edit $PR_URL --title "$PR_TITLE" --body "$(cat pr_body.txt)"
#           fi
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7
    - name: Set up Python
      uses: actions/setup-python@v5.1.0
      with:
        python-version: 3.x
    - name: Cache pip
      uses: actions/cache@v4.0.2
      with:
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        path: ~/.cache/pip
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: Run make check-packages
      run: make check-packages
    - name: Install klingon_tools
      run: make install
    - name: Run tests
      run: make test
