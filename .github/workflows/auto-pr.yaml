name: ðŸ”„ Auto PR

on:
  # Push to all but main and master
  push:
    branches-ignore:
      - main
      - master

jobs:
  create-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache APT packages
        uses: actions/cache@v2
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Fetch commit messages
        id: commit_messages
        run: |
          git fetch origin main
          COMMITS=$(git log origin/main..HEAD --pretty=format:"- %s" || echo "No conventional commits found.")
          COMMITS=$(echo "$COMMITS" | sed -E 's/^-\s([a-z]+)(\([^\)]*\))?:\s/- **\1**\2: /')
          echo "::set-output name=commits::$COMMITS"

      - name: Wait for tests to pass
        uses: actions/github-script@v3
        with:
          script: |
            const { getOctokit } = require('@actions/github');
            const context = require('@actions/github').context;
            const octokit = getOctokit(process.env.GITHUB_TOKEN);
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const ref = context.ref;

            const checkRuns = await octokit.checks.listForRef({
              owner,
              repo,
              ref,
              status: 'completed'
            });

            const testsCheck = checkRuns.data.check_runs.find(check => check.name === 'ðŸš¨ Run Tests');

            if (!testsCheck || testsCheck.conclusion !== 'success') {
              throw new Error('Tests have not passed yet.');
            }

      - name: Authenticate with GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status

      - name: Create or Update Pull Request
        run: |
          PR_URL=$(gh pr list --json url --jq '.[0].url' || echo "")

          if [ -z "$PR_URL" ]; then
          # No PR exists, create one
          gh pr create --base main --head ${{ github.ref }} --title "ðŸ”„ Pull Request for new branch `git rev-parse --abbrev-ref HEAD` created by @${{ github.actor }}" --body "This PR is automatically created for the new branch ${{ github.ref }} created by @${{ github.actor }}.

          **Changes:**
          ${{ steps.commit_messages.outputs.commits }}"
          else
          # PR exists, update it
          # Get the existing PR body
          EXISTING_BODY=$(gh pr view $PR_URL --json body --jq '.body')

          # Check if the PR body is broken
          if [[ "$EXISTING_BODY" == *"No conventional commits found."* ]];
          then
          echo "Regenerating PR body as it has a broken body."
          NEW_BODY="REGENERATED: This PR is automatically created for the new branch ${{ github.ref }}.

          **Changes:**
          ${{ steps.commit_messages.outputs.commits }}"
          gh pr edit $PR_URL --body "$NEW_BODY"
          else
          UPDATED_BODY="$EXISTING_BODY
          ${{ steps.commit_messages.outputs.commits }}"

          gh pr edit $PR_URL --body "$UPDATED_BODY"
          fi
          fi
