name: Auto PR

on:
  # Push to all but main and master
  push:
    branches-ignore:
    - main
    - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7
      with:
        fetch-depth: 0    # Fetch all branches
    - name: Cache APT packages
      uses: actions/cache@v4.0.2
      with:
        key: ${{ runner.os }}-apt
        path: /var/cache/apt
        restore-keys: ${{ runner.os }}-apt-
    - name: Cache pip packages
      uses: actions/cache@v4.0.2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gh
        pip install -r requirements.txt
        make install
    - name: Install klingon_tools
      run: make install
    - name: Run tests
      run: make test

  create-pr:
    # needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7
      with:
        fetch-depth: 0    # Fetch all branches
    - name: Cache APT packages
      uses: actions/cache@v4.0.2
      with:
        key: ${{ runner.os }}-apt
        path: /var/cache/apt
        restore-keys: ${{ runner.os }}-apt-
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Cache pip packages
      uses: actions/cache@v4.0.2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gh
        pip install -r requirements.txt
        make install
    - name: Authenticate with GitHub CLI
      env:
        GH_TOKEN: ""
      run: |
        unset GH_TOKEN
        GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        gh auth status
    - name: Set up environment variables
      run: |
        # Setup OpenAI API Key
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        # Get Current PR Title
        PR_TITLE=$(gh pr list --json title --jq '.[0].title' || echo "")
        echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
        echo "PR TITLE: $PR_TITLE"
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Generate PR Body from Template
      shell: /usr/bin/bash -e {0}
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PR_TITLE: ${{ env.PR_TITLE }}
      run: |
        python3 .github/workflows/pr_body_gen.py > pr_body.txt
        cat pr_body.txt
    - name: Update PR Body
      run: |
        PR_BODY=$(cat pr_body.txt)
        gh pr edit $PR_URL --title "$PR_TITLE" --body "$PR_BODY"


#       - name: Generate PR Title from Template with OpenAI
#         run: |
#           pip install -e .
#           PR_URL=$(gh pr list --json url --jq '.[0].url' || echo "")
#           if [ -z "$PR_TITLE" ]; then
#             PR_TITLE=$(pr-title-generate)
#           fi
#           if [ -z "$PR_URL" ]; then
#             # No PR exists, create one
#             gh pr create --base main --head ${{ github.ref }} --title "$PR_TITLE" --body "$(cat pr_body.txt)"
#           else
#             # PR exists, update it
#             gh pr edit $PR_URL --title "$PR_TITLE" --body "$(cat pr_body.txt)"
#           fi
