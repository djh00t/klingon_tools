name: ðŸ¥³ Release

on:
  push:
    branches:
      - release
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "16"

      - name: Load caches in parallel
        run: |
          {
            actions/cache@v2 --path ~/.npm --key ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} --restore-keys ${{ runner.os }}-node- &
            actions/cache@v2 --path ~/.cache/pip --key ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }} --restore-keys ${{ runner.os }}-pip- &
            wait
          }

      - name: Install Node.js dependencies
        run: npm install

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine packaging

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: npx semantic-release

      - name: Update caches in parallel
        if: steps.install_node_dependencies.outputs.cache-hit != 'true' || steps.install_python_dependencies.outputs.cache-hit != 'true'
        run: |
          {
            if [ "${{ steps.install_node_dependencies.outputs.cache-hit }}" != 'true' ]; then
              actions/cache@v2 --path ~/.npm --key ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} --restore-keys ${{ runner.os }}-node- &
            fi
            if [ "${{ steps.install_python_dependencies.outputs.cache-hit }}" != 'true' ]; then
              actions/cache@v2 --path ~/.cache/pip --key ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }} --restore-keys ${{ runner.os }}-pip- &
            fi
            wait
          }

  create-pr:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0 # Fetch all branches

      - name: Update caches in parallel
        run: |
          {
            actions/cache@v4.0.2 --path ~/.cache/pip --key ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }} --restore-keys ${{ runner.os }}-pip- &
            actions/cache@v2 --path ~/.npm --key ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} --restore-keys ${{ runner.os }}-node- &
            wait
          }

      - name: Setup Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: "3.x"

      - name: Set up environment variables
        run: |
          # Setup GITHUB_TOKEN
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          # Setup GH_TOKEN
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          # Setup OpenAI API Key
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          # Get Current PR Title
          PR_TITLE=$(gh pr list --json title --jq '.[0].title' || echo "")
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "PR TITLE: $PR_TITLE"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Configure Git & Login to GitHub CLI
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Install dependencies
        run: |
          pip install packaging
          make install

      - name: Run Unit Tests
        run: make test

      # Check if PR exists, if it doesn't create one with a generated title using
      # pr-title-generate
      - name: Create PR if it doesn't exist
        id: pr
        run: |
          SOURCE_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [ -z "$PR_TITLE" ]; then
            PR_TITLE=$(pr-title-generate)
            echo "PR_TITLE: $PR_TITLE"
          if [ "$SOURCE_BRANCH" = "release" ]; then
            BASE_BRANCH="main"
          else
            BASE_BRANCH="release"
          fi
          PR_URL=$(gh pr list --json url --jq '.[0].url' || echo "")
          if [ -z "$PR_URL" ]; then
            PR_URL=$(gh pr create --title "$PR_TITLE" --body "This PR was automatically generated by a GitHub Action" --base $BASE_BRANCH || echo "")
            echo "PR_URL: $PR_URL"
            if [ -z "$PR_URL" ]; then
              echo "A pull request for this branch already exists."
              exit 0
            fi
          else
            echo "A pull request for this branch already exists."
            exit 0
          fi
            fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_TITLE: ${{ env.PR_TITLE }}

      - name: Update PR if one already exists
        shell: /usr/bin/bash -e {0}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_TITLE: ${{ env.PR_TITLE }}
        run: |
          PR_URL=$(gh pr list --json url --jq '.[0].url' || echo "")
          PR_TITLE=$(gh pr list --json title --jq '.[0].title' || echo "")
          SOURCE_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          DEST_BRANCH=main
          PR_BODY=$(python3 .github/workflows/pr_body_gen.py $SOURCE_BRANCH $DEST_BRANCH)
          gh pr edit $PR_URL --title "$PR_TITLE" --body "$PR_BODY"
