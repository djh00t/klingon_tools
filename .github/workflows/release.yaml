name: ðŸ¥³ Release

on:
  push:
    branches:
      - release
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "16"

      - name: Load Node.js cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-cache
          restore-keys: |
            ${{ runner.os }}-node-cache

      - name: Load Python cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-cache
          restore-keys: |
            ${{ runner.os }}-pip-cache

      - name: Install Node.js dependencies
        run: npm install

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Build the package
        run: python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        env:
          TWINE_USER_AGENT: ${{ secrets.PYPI_USER_AGENT }}
        run: twine upload dist/*


  create-pr:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0 # Fetch all branches

      - name: Update pip cache
        uses: actions/cache@v4.0.2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Update npm cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: "3.x"

      - name: Set up environment variables
        run: |
          # Setup GITHUB_TOKEN
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          # Setup GH_TOKEN
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          # Setup OpenAI API Key
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          # Get Current PR Title
          PR_TITLE=$(gh pr list --json title --jq '.[0].title' || echo "")
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "PR TITLE: $PR_TITLE"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Configure Git & Login to GitHub CLI
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Compile Python requirements
        run: make install

      - name: Install Node.js dependencies
        run: make install

      - name: Run Unit Tests
        run: make test

      # Check if PR exists, if it doesn't create one with a generated title using
      # pr-title-generate
      - name: Create PR if it doesn't exist
        id: pr
        run: |
          SOURCE_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [ -z "$PR_TITLE" ]; then
            PR_TITLE=$(pr-title-generate)
            echo "PR_TITLE: $PR_TITLE"
          if [ "$SOURCE_BRANCH" = "release" ]; then
            BASE_BRANCH="main"
          else
            BASE_BRANCH="release"
          fi
          PR_URL=$(gh pr list --json url --jq '.[0].url' || echo "")
          if [ -z "$PR_URL" ]; then
            PR_URL=$(gh pr create --title "$PR_TITLE" --body "This PR was automatically generated by a GitHub Action" --base $BASE_BRANCH || echo "")
            echo "PR_URL: $PR_URL"
            if [ -z "$PR_URL" ]; then
              echo "A pull request for this branch already exists."
              exit 0
            fi
          else
            echo "A pull request for this branch already exists."
            exit 0
          fi
            fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_TITLE: ${{ env.PR_TITLE }}

      - name: Update PR if one already exists
        shell: /usr/bin/bash -e {0}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_TITLE: ${{ env.PR_TITLE }}
        run: |
          PR_URL=$(gh pr list --json url --jq '.[] | select(.headRefName == env.SOURCE_BRANCH and .baseRefName == env.DEST_BRANCH) | .url' || echo "")
          if [ -z "$PR_URL" ]; then
            PR_TITLE=$(pr-title-generate)
            echo "PR_TITLE: $PR_TITLE"
            PR_URL=$(gh pr create --title "$PR_TITLE" --body "This PR was automatically generated by a GitHub Action" --base $DEST_BRANCH || echo "")
            echo "PR_URL: $PR_URL"
            if [ -z "$PR_URL" ]; then
              echo "A pull request for this branch already exists."
              exit 0
            fi
          else
            PR_TITLE=$(gh pr list --json title --jq '.[] | select(.headRefName == env.SOURCE_BRANCH and .baseRefName == env.DEST_BRANCH) | .title' || echo "")
            PR_BODY=$(python3 .github/workflows/pr_body_gen.py $SOURCE_BRANCH $DEST_BRANCH)
            gh pr edit $PR_URL --title "$PR_TITLE" --body "$PR_BODY"
          fi
