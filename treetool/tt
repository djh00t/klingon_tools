#!/bin/bash
###
### Treetool - Map and Create directory structures using `tree` outputs
###

input_csv=false
input_file=""
output_csv=false
output_file=""

# Function to parse command-line arguments
function parse_arguments() {
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            # Input file name used to create the directory structure and files
            -c|--create) export input_csv=true; input_file="$2"; shift ;;
            # Output file name used to save the project directory and file structure
            -s|--save) 
                if [ -z "$2" ]; then
                    echo "Error: No output file provided."
                    exit 1
                fi
                export output_csv=true; output_file="$2"; shift ;;
            # Raw mode - accept raw input from `tree -F` and create a CSV file
            # using the --output argument
            --raw) 
                if [ -z "$2" ]; then
                    echo "Error: No output file provided."
                    exit 1
                fi
                export raw_input=true; shift ;;
            -i|--install) install_tt; exit 0 ;;
            *) echo "Unknown parameter: $1"; exit 1 ;;
        esac
        shift
    done

    # Apply rules based on the arguments:
    #  - create_csv and output_csv cannot be true at the same time
    #  - create_csv is true then create_file must be provided and exist
    #  - output_csv is true then the output_file must be provided and exist
    if [[ $create_csv == true && $output_csv == true ]]; then
        # Cannot use both create and output CSV at the same time
        echo "Error: Cannot use both create and output CSV at the same time."
        exit 1
    # Check if create_csv is true and create_file is provided
    elif [[ $create_csv == true ]]; then
        if [[ -z "$create_file" ]]; then
            echo "Error: Create file is required."
            exit 1
        fi
        # Check if the create file exists
        check_file_exists "$create_file"
    # Check if output_csv is true and output_file is provided
    elif [[ $output_csv == true ]]; then
        if [[ -z "$output_file" ]]; then
            echo "Error: Output file is required."
            exit 1
        fi
    fi

}

# Function to check if the input/output file exists
check_file_exists() {
    if [[ ! -f "$1" ]]; then
        echo "Error: File '$1' not found."
        exit 1
    fi
}

# Function to process a line from the CSV
process_input_csv_line() {
    local dir=$1
    local name=$2

    if [[ $dir -eq 1 ]]; then
        mkdir -p "$name"
    elif [[ $dir -eq 0 ]]; then
        touch "$name"
    fi
}

# Function to read and process the CSV file
process_input_csv() {
    local input_file=$1

    while IFS=, read -r dir name; do
        # Skip the header line
        if [[ $dir == "dir" ]]; then
            continue
        fi

        process_input_csv_line "$dir" "$name"
    done < "$input_file"
}


function process_output_csv_dirs() {
    # Recursively get all directories and files under current directory
    while IFS= read -r line; do
        TREE_DIRS+=("$line/")
        [[ $output_csv == true ]] && echo "1,$line/" >> "$output_file"
        echo "$line"
    done < <(tree -fid --gitignore | sed '1d' | sed '$d;N;$d;P;D')
}

function process_output_csv_files() {
    # Setup array
    local TREE_DIRS=()
    local TREE_FILES=()

    # Get the directories
    TREE_DIRS=($(process_output_csv_dirs))

    # Recursively get all files and dirs from `pwd`, skipping the entry if it exists in $TREE_DIRS
    while IFS= read -r line; do
        TREE_FILES+=("$line")
        [[ $output_csv == true ]] && echo "0,$line" >> "$output_file"
    done < <(tree -fia --gitignore | sed '1d' | sed '$d;N;$d;P;D' | grep -vxF -f <(printf '%s\n' "${TREE_DIRS[@]}"))

    # Announce the directories and files
    if [[ $output_csv == false ]]; then
        printf "The following directories will be created:\n"
        printf "  - %s\n" "${TREE_DIRS[@]}"
        printf "The following files will be created:\n"
        printf "  - %s\n" "${TREE_FILES[@]}"
    fi
}

# Function to compare the outputs of `tree` and `tree -F`
compare_raw_and_F_output() {
    local raw_output=$1
    local F_output=$2

    if [[ "$raw_output" != "$F_output" ]]; then
        echo "Error: The outputs of `tree` and `tree -F` do not match. Please run `tree` with -F."
        return 1
    fi

    return 0
}

# Function to process raw input from `tree`
process_raw_input() {
    local raw_output=""
    local F_output=""

    while IFS= read -r line; do
        # Skip the first line
        if [[ $line == "." ]]; then
            continue
        fi

        # Check if the line is a directory or a file
        if [[ $line == *"/"* ]]; then
            echo "1,$line" >> "$output_file"
        else
            echo "0,$line" >> "$output_file"
        fi

        raw_output+="$line\n"
    done

    while IFS= read -r line; do
        F_output+="$line\n"
    done < <(tree -F)

    compare_raw_and_F_output "$raw_output" "$F_output"
}

# Function to install tt into /usr/local/bin/, test if it's in the path, and check if `tree` is installed
install_tt() {
    cp "$0" /usr/local/bin/tt
    if ! command -v tt &> /dev/null; then
        echo "Error: tt could not be found in the PATH after installation."
        exit 1
    fi
    if ! command -v tree &> /dev/null; then
        echo "tree is not installed. Attempting to install..."
        if [[ "$OSTYPE" == "darwin"* ]]; then
            brew install tree
        elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
            if [[ -f /etc/debian_version ]]; then
                sudo apt-get install tree
            else
                echo "Error: Your Linux distribution is not supported. Please install tree manually."
                exit 1
            fi
        else
            echo "Error: Your operating system is not supported. Please install tree manually."
            exit 1
        fi
    fi
    echo "tt has been installed successfully."
}

# Function to print a helpful message
print_help() {
    echo -e "Usage: tt [OPTIONS]"
    echo -e "Map and Create directory structures using 'tree' outputs."
    echo -e ""
    echo -e "Options:"
    echo -e "  -c, --create FILE   Create directory and file structure using a CSV file as input."
    echo -e "  -s, --save FILE   Save the directory and file structure to the CSV file provided."
    echo -e "  -i, --install       Install tt into /usr/local/bin/"
    echo -e "  --raw               Process raw input from 'tree -F' and create a CSV file. (Must be used with -o/--output)"
    echo -e ""
    echo -e "If no options are provided, this help message will be displayed."
}

# Main function
main() {
    # If no arguments are provided, print the help message
    if [[ $# -eq 0 ]]; then
        print_help
        exit 0
    fi

    # Parse command-line arguments
    parse_arguments "$@"

    # If raw_input is true then process the raw input
    if [[ $raw_input == true ]]; then
        if [[ -z "$output_file" ]]; then
            echo "Error: Output file is required for raw input."
            exit 1
        fi
        # Process the raw input
        if ! process_raw_input; then
            echo "Error: Failed to process raw input. Please run `tree` with -F."
            exit 1
        fi

        # Exit the script cleanly
        exit 0
    fi

    # If input_csv is true then process the input CSV file
    if [[ $input_csv == true ]]; then
        # Process the input CSV file
        process_input_csv "$input_file"

        # Exit the script cleanly
        exit 0
    fi
    
    # If output_csv is true then create the output file
    if [[ $output_csv == true ]]; then
        touch "$output_file"
        echo "dir,name" > "$output_file"
        # Output directories and files
        process_output_csv_files

        # Exit the script cleanly
        exit 0
    fi
}

# Run the main function
main "$@"
