diff --git a/Makefile b/Makefile
index 157452e..1b1fb8b 100644
--- a/Makefile
+++ b/Makefile
@@ -1,12 +1,12 @@
-# Makefile for klingon-tools Python package
+# Makefile for klingon-deps Python package

 # Variables
-APP_NAME = "klingon-tools"
-TWINE_USERNAME ?= __token__
-TEST_TWINE_PASSWORD ?= $(TEST_PYPI_USER_AGENT)
-PYPI_TWINE_PASSWORD ?= $(PYPI_USER_AGENT)
+APP_NAME = "klingon-deps"
+POETRY_USERNAME ?= __token__
+TEST_PYPI_PASSWORD ?= $(TEST_PYPI_USER_AGENT)
+PYPI_PASSWORD ?= $(PYPI_USER_AGENT)

-# Clean target
+# Clean the repository
 clean:
 	@echo "Cleaning up repo............................................................. ðŸ§¹"
 	@make push-prep
@@ -26,116 +26,123 @@ clean:
 	@rm -rf node_modules
 	@echo "Repo cleaned up............................................................... âœ…"

+# Ensure that the latest Node.js and npm are installed
+ensure-node: fetch-latest-node-version install-latest-nvm
+	@if [ "$$(uname)" = "Linux" ]; then \
+		if [ -f /etc/debian_version ]; then \
+			echo "Detected Debian-based Linux. Installing Node.js $$(cat .latest_node_version)..."; \
+			curl -sL https://deb.nodesource.com/setup_$$(cat .latest_node_version | cut -d'.' -f1).x | sudo bash -; \
+			sudo apt-get install -y nodejs; \
+		else \
+			echo "Unsupported Linux distribution. Exiting..."; \
+			exit 1; \
+		fi \
+	elif [ "$$(uname)" = "Darwin" ]; then \
+		echo "Detected macOS. Checking for Homebrew..."; \
+		if ! command -v brew >/dev/null 2>&1; then \
+			echo "Homebrew not found. Installing Homebrew..."; \
+			/bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; \
+		fi; \
+		NODE_MAJOR_VERSION=$$(cat .latest_node_version | cut -d'.' -f1 | tr -d 'v'); \
+		if brew ls --versions node@$$NODE_MAJOR_VERSION > /dev/null; then \
+			echo "Installing Node.js $$NODE_MAJOR_VERSION using Homebrew..."; \
+			brew install node@$$NODE_MAJOR_VERSION; \
+		else \
+			echo "Specific Node.js version not available in Homebrew. Installing using nvm..."; \
+			export NVM_DIR="$$HOME/.nvm"; \
+			[ -s "$$NVM_DIR/nvm.sh" ] && \. "$$NVM_DIR/nvm.sh"; \
+			nvm install $$(cat .latest_node_version); \
+			nvm use $$(cat .latest_node_version); \
+		fi; \
+	else \
+		echo "Unsupported OS. Exiting..."; \
+		exit 1; \
+	fi
+
+# Ensure that semantic-release is installed
+ensure-semantic-release:
+	@npm list -g --depth=0 | grep semantic-release >/dev/null 2>&1 || { \
+		echo >&2 "semantic-release is not installed. Installing..."; \
+		npm install -g semantic-release; \
+	}
+
+# Fetch the latest Node.js version
+fetch-latest-node-version:
+	@curl -s https://nodejs.org/dist/index.json | grep '"version"' | head -1 | awk -F'"' '{print $$4}' > .latest_node_version
+	@echo $$(cat .latest_node_version)"
+
+# Get developer information
+get-developer-info:
+	@echo "Fetching commit author information..."
+	@COMMIT_AUTHOR=$$(git log -1 --pretty=format:'%an')
+	@echo "This code was committed by $$COMMIT_AUTHOR"
+
+# Get first octet of current node version
+node-major-version:
+	@curl -s https://nodejs.org/dist/index.json | grep '"version"' | head -1 | awk -F'"' '{print $$4}' | sed 's/^v//' | awk -F'.' '{print $$1}'
+
+# Install the package locally
+install:
+	@echo "Installing dependencies..."
+	@poetry install
+
+# Install the development dependencies and the package locally
+install-dev:
+	@echo "Checking for Poetry installation..."
+	@if ! command -v poetry &> /dev/null; then \
+		echo "Poetry not found. Installing Poetry."; \
+		curl -sSL https://install.python-poetry.org | python3 -; \
+	fi
+	@echo "Poetry is installed. Checking dependencies..."
+	@poetry install --with dev
+
+# Install the latest version of nvm
+install-latest-nvm:
+	@echo "Installing the latest version of nvm..."
+	@LATEST_NVM_VERSION=$$(curl -s https://api.github.com/repos/nvm-sh/nvm/releases/latest | grep -oE '"tag_name": "[^"]+"' | cut -d'"' -f4) && \
+	curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/$$LATEST_NVM_VERSION/install.sh | bash
+
+# Perform a semantic release
+release: ensure-node ensure-semantic-release
+	@echo "Starting semantic release..."
+	@semantic-release
+
 # Pre-push cleanup target
 push-prep:
+	@echo "Running poetry lock......................................................... ðŸ”’"
+	@poetry lock
 	@echo "Removing temporary files.................................................... ðŸ§¹"
 	@find . -type f -name '*.pyc' -delete
-	@if [ -f requirements.txt ]; then \
-		echo "Resetting requirements.txt to empty state................................... âœ…"; \
-		rm -rf requirements.txt; \
-		touch requirements.txt; \
-	fi
-	@if [ -f requirements-dev.txt ]; then \
-		echo "Resetting requirements-dev.txt to empty state............................... âœ…"; \
-		rm -rf requirements-dev.txt; \
-		touch requirements-dev.txt; \
-	fi
 	@echo "Removed temporary files..................................................... âœ…"

-## check-packages: Check for required pip packages and requirements.txt, install if missing
-check-packages:
-	@echo "Installing pip-tools..."
-	@pip install pip-tools
-	@echo "Compiling requirements.txt..."
-	@pip-compile requirements.in
-	@echo "Checking for required pip packages and requirements.txt..."
-	@if [ ! -f requirements.txt ]; then \
-		echo "requirements.txt not found. Please add it to the project root."; \
-		exit 1; \
-	fi
-	@echo "Installing missing packages from requirements.txt..."
-	@pip install -r requirements.txt
-	@pre-commit install --overwrite
-
-## sdist: Create a source distribution package
+# Create a source distribution package
 sdist: clean
-	python setup.py sdist
+	@echo "Creating source distribution..."
+	@poetry build --format sdist

-## wheel: Create a wheel distribution package
-wheel: clean
-	python setup.py sdist bdist_wheel
+# Run tests
+test:
+	@echo "Running unit tests..."
+	@poetry run pytest

-## upload-test: Run tests, if they pass update version number, echo it to console and upload the distribution package to TestPyPI
-upload-test: test wheel
-	@echo "Uploading Version $$NEW_VERSION to TestPyPI..."
-	twine upload --repository-url https://test.pypi.org/legacy/ --username $(TWINE_USERNAME) --password $(TEST_TWINE_PASSWORD) dist/*
+# Uninstall the local package
+uninstall:
+	@echo "Uninstalling $(APP_NAME)..."
+	@poetry remove $(APP_NAME)

-## upload: Run tests, if they pass update version number and upload the distribution package to PyPI
+# Upload to PyPI
 upload: test wheel
-	@echo "Uploading Version $$NEW_VERSION to PyPI..."
-	twine upload --username $(TWINE_USERNAME) --password $(PYPI_TWINE_PASSWORD) dist/*
-
-## install: Install the package locally
-install:
-	@echo "Checking for requirements..."
-	@make check-packages
-	@echo "Installing $$APP_NAME..."
-	@pip install -e .
-
-## install-pip: Install the package locally using pip
-install-pip:
-	pip install $(APP_NAME)
+	@echo "Uploading Version to PyPI..."
+	@poetry publish --username $(POETRY_USERNAME) --password $(PYPI_PASSWORD)

-## install-pip-test: Install the package locally using pip from TestPyPI
-install-pip-test:
-	pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple $(APP_NAME)
+# Upload to TestPyPI
+upload-test: test wheel
+	@echo "Uploading Version to TestPyPI..."
+	@poetry publish --repository testpypi --username $(POETRY_USERNAME) --password $(TEST_PYPI_PASSWORD)

-## uninstall: Uninstall the local package
-uninstall:
-	pip uninstall $(APP_NAME)
+# Create a wheel distribution package
+wheel: clean
+	@echo "Creating wheel distribution..."
+	@poetry build --format wheel

-# Run tests
-test:
-	@pip install pytest
-	@echo "Running unit tests..."
-	pytest --no-header --no-summary -v --disable-warnings tests/
-
-## update-version: Read the version number from VERSION file and save it as
-## CURRENT_VERSION variable it will look like A.B.C Increment the third (C)
-## number by 1 and write it back to the VERSION file. Validate that the new
-## version number is valid and echo it to console then commit it to git and
-## push to origin. Confirm that VERSION and setup.py are in sync.
-update-version:
-	@CURRENT_VERSION=$$(cat VERSION); \
-	echo "Current version is:		$$CURRENT_VERSION"; \
-	NEW_VERSION=$$(awk -F. '{print $$1"."$$2"."$$3+1}' VERSION); \
-	PYPI_VERSION=$$(curl -s https://pypi.org/pypi/$(APP_NAME)/json | jq -r .info.version); \
-	TEST_PYPI_VERSION=$$(curl -s https://test.pypi.org/pypi/$(APP_NAME)/json | jq -r .info.version); \
-	HIGHEST_VERSION=$$(echo -e "$$NEW_VERSION\n$$PYPI_VERSION\n$$TEST_PYPI_VERSION" | sort -V | tail -n 1); \
-	if [ "$$HIGHEST_VERSION" != "$$NEW_VERSION" ]; then \
-		NEW_VERSION=$$(echo $$HIGHEST_VERSION | awk -F. '{print $$1"."$$2"."$$3+1}'); \
-	fi; \
-	echo $$NEW_VERSION > VERSION; \
-	sed -i "s/version=\"[0-9]*\.[0-9]*\.[0-9]*\"/version=\"$$NEW_VERSION\"/" setup.py; \
-	git add VERSION setup.py; \
-	git commit -m "Bump version to $$NEW_VERSION"; \
-	git push origin version-bump; \
-	echo $$NEW_VERSION > VERSION; \
-	echo "New version is:			$$NEW_VERSION"; \
-	sed -i "s/version=\"[0-9]*\.[0-9]*\.[0-9]*\"/version=\"$$NEW_VERSION\"/" setup.py; \
-	@SETUP_VERSION=$$(grep "version=" setup.py | awk -F"'" '{print $$2}'); \
-	if [ "$$NEW_VERSION" != "$$SETUP_VERSION" ]; then \
-		echo "Error: VERSION and setup.py are not in sync"; \
-		exit 1; \
-	fi; \
-	git add VERSION setup.py; \
-	git commit -m "Bump version to $$NEW_VERSION"; \
-	git push origin version-bump
-
-## generate-pyproject: Generate a pyproject.toml file
-generate-pyproject:
-	@echo "[build-system]" > pyproject.toml
-	@echo "requires = ['setuptools', 'wheel']" >> pyproject.toml
-	@echo "build-backend = 'setuptools.build_meta'" >> pyproject.toml
-
-.PHONY: clean check-packages sdist wheel upload-test upload install uninstall test update-version generate-pyproject gh-actions
+.PHONY: clean check-packages sdist wheel upload-test upload install uninstall test push-prep get-developer-info release
